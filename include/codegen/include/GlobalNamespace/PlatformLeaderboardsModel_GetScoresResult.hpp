// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlatformLeaderboardsModel
#include "GlobalNamespace/PlatformLeaderboardsModel.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: PlatformLeaderboardsModel/GetScoresResult
  struct PlatformLeaderboardsModel::GetScoresResult : public System::Enum {
    public:
    // public System.Int32 value__
    // Offset: 0x0
    int value;
    // static field const value: static public PlatformLeaderboardsModel/GetScoresResult OK
    static constexpr const int OK = 0;
    // Get static field: static public PlatformLeaderboardsModel/GetScoresResult OK
    static GlobalNamespace::PlatformLeaderboardsModel::GetScoresResult _get_OK();
    // Set static field: static public PlatformLeaderboardsModel/GetScoresResult OK
    static void _set_OK(GlobalNamespace::PlatformLeaderboardsModel::GetScoresResult value);
    // static field const value: static public PlatformLeaderboardsModel/GetScoresResult Failed
    static constexpr const int Failed = 1;
    // Get static field: static public PlatformLeaderboardsModel/GetScoresResult Failed
    static GlobalNamespace::PlatformLeaderboardsModel::GetScoresResult _get_Failed();
    // Set static field: static public PlatformLeaderboardsModel/GetScoresResult Failed
    static void _set_Failed(GlobalNamespace::PlatformLeaderboardsModel::GetScoresResult value);
    // Creating value type constructor for type: GetScoresResult
    GetScoresResult(int value_ = {}) : value{value_} {}
  }; // PlatformLeaderboardsModel/GetScoresResult
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PlatformLeaderboardsModel::GetScoresResult, "", "PlatformLeaderboardsModel/GetScoresResult");
#pragma pack(pop)
